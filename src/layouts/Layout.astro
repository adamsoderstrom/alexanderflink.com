---
import AnimatedLogo from "../components/AnimatedLogo.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="h-full">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Astro description" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=DM+Serif+Display:ital@0;1&display=swap"
            rel="stylesheet"
        />
        <ViewTransitions />
    </head>
    <body
        class="px-5 md:px-10 lg:px-20 h-full max-w-screen-xl mx-auto flex flex-col"
    >
        <header
            class="py-4 flex justify-between items-center md:py-10 lg:py-20"
            transition:persist
        >
            <a href="/" class="w-[50vw] min-w-48 max-w-96">
                <AnimatedLogo class="w-full h-auto" />
            </a>
            <nav class="-col-start-1 -col-end-3">
                <ul
                    class="flex justify-end gap-4 w-full font-serif text-md md:text-lg md:gap-10 lg:text-xl lg:gap-20"
                >
                    <li><a href="/blog">blog</a></li>
                    <li>
                        <a href="https://github.com/alexanderflink">github</a>
                    </li>
                </ul>
            </nav>
        </header>
        <main
            class="flex-grow-1 space-y-10 py-5 grid grid-cols-4 gap-x-4 md:grid-cols-8 lg:grid-cols-12"
        >
            <slot />
        </main>
        <footer class="pt-10 pb-4 flex justify-between items-center">
            <a class="text-xs" href="mailto:hi@alexanderflink.com"
                >hi@alexanderflink.com</a
            >
            <a class="text-xs" href="https://github.com/alexanderflink"
                >github</a
            >
        </footer>
        <canvas class="fixed inset-0 -z-10" id="bgCanvas" transition:persist
        ></canvas>
        <style is:global>
            @tailwind base;
            @tailwind components;
            @tailwind utilities;

            @layer base {
                html {
                    @apply text-black;
                }
            }
            :root {
            }
            html {
            }
        </style>

        <script>
            import { Renderer, Geometry, Program, Mesh, Texture } from "ogl";

            const { innerWidth, innerHeight } = window;
            let x = 0;
            let y = 0;

            document.addEventListener("mouseleave", () => {
                x = 0;
                y = 0;
            });

            window.addEventListener("mousemove", (e) => {
                const { clientX, clientY } = e;

                // map clientX and clientY to a range of -1 to 1
                x = (clientX / innerWidth) * 2 - 1;
                y = ((clientY / innerHeight) * 2 - 1) * -1;
            });

            document.addEventListener("astro:page-load", (e) => {
                const canvas = document.getElementById("bgCanvas");
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;

                const renderer = new Renderer({
                    canvas: canvas as HTMLCanvasElement,
                    width: canvas.width,
                    height: canvas.height,
                    alpha: true,
                });

                const gl = renderer.gl;

                const geometry = new Geometry(gl, {
                    position: {
                        size: 2,
                        data: new Float32Array([-1, -1, 3, -1, -1, 3]),
                    },
                    uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },
                });

                const program = new Program(gl, {
                    vertex: /* glsl */ `
                    attribute vec2 uv;
                    attribute vec2 position;

                    varying vec2 vUv;

                    void main() {
                        vUv = uv;
                        gl_Position = vec4(position, 0, 1);
                    }
                `,
                    fragment: /* glsl */ `
                    precision highp float;

                    uniform float uTime;
                    uniform vec2 uMouse;

                    varying vec2 vUv;

                    void main() {
                      float color = cos(vUv.x + uMouse.x) + sin(vUv.y + uMouse.y);

                      gl_FragColor = vec4(color, color, color, 0.1);
                      gl_FragColor.rgb *= gl_FragColor.a;
                    }
                `,
                    uniforms: {
                        uTime: { value: 0 },
                        uMouse: { value: [x, y] },
                    },
                });

                const mesh = new Mesh(gl, { geometry, program });

                requestAnimationFrame(update);
                function update(t) {
                    requestAnimationFrame(update);

                    program.uniforms.uTime.value = t * 0.1;
                    program.uniforms.uMouse.value = [x, y];

                    // Don't need a camera if camera uniforms aren't required
                    renderer.render({ scene: mesh });
                }
            });
        </script>
    </body>
</html>
