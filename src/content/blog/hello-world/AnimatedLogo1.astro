<canvas class="aspect-[484/70] max-w-full !h-auto" id="AnimatedLogo1Canvas"
></canvas>

<script>
  import { Renderer, Geometry, Program, Mesh, Texture } from "ogl";
  import imagesLoaded from "~/utils/imagesLoaded.ts";
  const logoCanvas = document.querySelector("#AnimatedLogo1Canvas");

  if (!logoCanvas) {
    throw new Error("Canvas not found");
  }

  const img = new Image();
  img.src = "/logo.png";

  img.onload = () => {
    const renderer = new Renderer({
      canvas: logoCanvas as HTMLCanvasElement,
      width: img.width,
      height: img.height,
      alpha: true,
    });

    const gl = renderer.gl;

    const texture = new Texture(gl);
    texture.image = img;

    const geometry = new Geometry(gl, {
      position: {
        size: 2,
        data: new Float32Array([-1, -1, 3, -1, -1, 3]),
      },
      uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },
    });

    const program = new Program(gl, {
      vertex: /* glsl */ `
          attribute vec2 uv;
          attribute vec2 position;

          varying vec2 vUv;

          void main() {
              vUv = uv;
              gl_Position = vec4(position, 0, 1);
          }
      `,
      fragment: /* glsl */ `
          precision mediump float;

          uniform sampler2D uTexture;
          varying vec2 vUv;

          void main() {
            vec4 color = texture2D(uTexture, vUv);

            gl_FragColor.rgb = color.rgb;
            gl_FragColor.a = color.a;
            // premultiply alpha
            gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
          }
      `,
      uniforms: {
        uTexture: { value: texture },
      },
    });

    const mesh = new Mesh(gl, { geometry, program });

    requestAnimationFrame(update);
    function update(t: number) {
      requestAnimationFrame(update);

      renderer.render({ scene: mesh });
    }
  };
</script>
